// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?@relation(fields:[authorId], references:[id])
  authorId  String?
  }

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  }

enum ROLES {
  ADMIN 
  USER
}
model User {
  id            String    @id @default(cuid())
  name          String?
  password      String?
  email         String?@unique
  emailVerified DateTime?
  role          ROLES  @default(USER)
  posts         Post[]
  accounts      Account[]
  @@map(name: "users")
  }

model VerificationToken   {
  id         String    @id @default(cuid())
  email       String
  token       String @unique
  // expires     DateTime

  @@unique([email, token])
}